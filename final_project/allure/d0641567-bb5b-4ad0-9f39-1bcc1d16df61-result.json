{"name": "test_reg_form_validation_multiple_error[3]", "status": "failed", "statusDetails": {"message": "AssertionError: assert \"{'username'...ust match']}\" not in '<html lang=...body></html>'\n  \"{'username': ['Inc...words must match']}\" is contained here:\n    <html lang=\"en\"><head>\n        <meta charset=\"UTF-8\">\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n    \n        \n            <title></title>...\n  \n  ...Full output truncated (91 lines hidden), use '-vv' to show", "trace": "self = <test_ui.TestRegisterPage object at 0x7f078638f6d0>\nregister_page = <ui.pages.register.RegisterPage object at 0x7f078639e9d0>\nerr = 3\n\n    @pytest.mark.UI\n    @pytest.mark.parametrize(\"err\", [1, 2, 3])\n    def test_reg_form_validation_multiple_error(self, register_page, err):\n        \"\"\"\n        CHECK REGISTER FORM VALIDATION ERRORS\n    \n        Step 1:\n        Type in data into forms (with 2 or 3 errors)\n    \n        Step 2:\n        Click register\n    \n        Step 3:\n        Check that user is not created and error message is displayed\n    \n        EXPECT:\n        User is not created, error message displayed correctly\n        \"\"\"\n        if err == 1:\n            NAME = register_page.generate_data()\n            register_page.send(register_page.locators.FORM_USERNAME, \"1\")\n            register_page.send(register_page.locators.FORM_PASSWORD, NAME)\n            register_page.send(register_page.locators.FORM_CPASSWORD, NAME + \"@test.tuu\")\n            register_page.send(register_page.locators.FORM_EMAIL, NAME + \"@test.tuu\")\n            register_page.click(register_page.locators.FORM_CONFIRM)\n            register_page.click(register_page.locators.BUTTON_SUBMIT)\n            assert \"Passwords must match\" in register_page.driver.page_source\n            assert \"Incorrect username length\" in register_page.driver.page_source\n            assert \"{'username': ['Incorrect username length'], 'password': ['Passwords must match']}\" not in register_page.driver.page_source\n            assert self.builder.check_user_by_name(NAME) == False\n        elif err == 2:\n            NAME = register_page.generate_data()\n            register_page.send(register_page.locators.FORM_USERNAME, NAME)\n            register_page.send(register_page.locators.FORM_PASSWORD, NAME)\n            register_page.send(register_page.locators.FORM_CPASSWORD, NAME + \"Q\")\n            register_page.send(register_page.locators.FORM_EMAIL, NAME + \"@\")\n            register_page.click(register_page.locators.FORM_CONFIRM)\n            register_page.click(register_page.locators.BUTTON_SUBMIT)\n            assert \"Invalid email address\" in register_page.driver.page_source\n            assert \"Passwords must match\" in register_page.driver.page_source\n            assert \"{'email': ['Invalid email address'], 'password': ['Passwords must match']}\" not in register_page.driver.page_source\n            assert self.builder.check_user_by_name(NAME) == False\n        elif err == 3:\n            NAME = register_page.generate_data()\n            register_page.send(register_page.locators.FORM_USERNAME, \"6\")\n            register_page.send(register_page.locators.FORM_PASSWORD, NAME)\n            register_page.send(register_page.locators.FORM_CPASSWORD, NAME + \"Q\")\n            register_page.send(register_page.locators.FORM_EMAIL, NAME + \"@\")\n            register_page.click(register_page.locators.FORM_CONFIRM)\n            register_page.click(register_page.locators.BUTTON_SUBMIT)\n            assert \"Incorrect username length\" in register_page.driver.page_source\n            assert \"Passwords must match\" in register_page.driver.page_source\n            assert \"Invalid email address\" in register_page.driver.page_source\n>           assert \"{'username': ['Incorrect username length'], 'email': ['Invalid email address'], 'password': ['Passwords must match']}\" not in register_page.driver.page_source\nE           assert \"{'username'...ust match']}\" not in '<html lang=...body></html>'\nE             \"{'username': ['Inc...words must match']}\" is contained here:\nE               <html lang=\"en\"><head>\nE                   <meta charset=\"UTF-8\">\nE                   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\nE               \nE                   \nE                       <title></title>...\nE             \nE             ...Full output truncated (91 lines hidden), use '-vv' to show\n\ntest_ui.py:293: AssertionError"}, "description": "\n        CHECK REGISTER FORM VALIDATION ERRORS\n        \n        Step 1:\n        Type in data into forms (with 2 or 3 errors)\n        \n        Step 2:\n        Click register\n        \n        Step 3:\n        Check that user is not created and error message is displayed\n\n        EXPECT: \n        User is not created, error message displayed correctly\n        ", "parameters": [{"name": "err", "value": "3"}], "start": 1590595735670, "stop": 1590595737138, "uuid": "c8c0fd8f-29b8-4e71-9940-e92d1fa9512c", "historyId": "ebcf6442788a52f1464f93af29e84936", "testCaseId": "dc62db1acb5d6f5ed2946bb655f64cf4", "fullName": "test_ui.TestRegisterPage#test_reg_form_validation_multiple_error", "labels": [{"name": "tag", "value": "UI"}, {"name": "suite", "value": "test_ui"}, {"name": "subSuite", "value": "TestRegisterPage"}, {"name": "host", "value": "alex-Z87X-UD3H"}, {"name": "thread", "value": "3002-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_ui"}]}